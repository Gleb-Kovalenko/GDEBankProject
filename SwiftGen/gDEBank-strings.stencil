{% if tables.count > 0 %}
import Foundation
import GDEBankCore

// swiftlint:disable superfluous_disable_command file_length implicit_return prefer_self_in_static_references

// MARK: - Strings

// swiftlint:disable explicit_type_interface function_parameter_count identifier_name line_length
// swiftlint:disable nesting type_body_length type_name vertical_whitespace_opening_braces
{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    _ p{{forloop.counter}}: {{type}}{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    p{{forloop.counter}}{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item sp %}
{{sp}}  {% for string in item.strings %}
{{sp}}  {% if not param.noComments %}
{{sp}}  /// {{string.translation}}
{{sp}}  {% endif %}
{{sp}}  {% if string.types %}
{{sp}}  public static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> String {
{{sp}}    return {{enumName}}.tr("{{table}}", "{{string.key}}", {% call argumentsBlock string.types %}, fallback: "Plural format key: \"%#@{{string.key}}@\"")
{{sp}}  }
{{sp}}  {% else %}
{{sp}}  public static var {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: String {
{{sp}}    {{enumName}}.tr("{{table}}", "{{string.key}}", fallback: "{{string.translation}}")
{{sp}}  }
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% for child in item.children %}

{{sp}}  public enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
{{sp}}    {% set sp2 %}{{sp}}  {% endset %}
{{sp}}    {% call recursiveBlock table child sp2 %}
{{sp}}  }
{{sp}}  {% endfor %}
{% endmacro %}

{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
public enum {{enumName}} {

  /// Update bundle if you need to change app language
  public static var bundle: Bundle?
  public static var locale: Locale?
  {% if tables.count > 1 %}
  {% for table in tables %}
  public enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% call recursiveBlock table.name table.levels "  " %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock tables.first.name tables.first.levels "" %}
  {% endif %}
}
// swiftlint:enable explicit_type_interface identifier_name line_length nesting type_body_length type_name

extension {{enumName}} {
  private static func tr(_ table: String, _ key: String, _ args: CVarArg..., fallback: String = "") -> String {
    let format = (bundle ?? BundleToken.bundle).localizedString(forKey: key, value: fallback, table: table)
    return String(format: format, locale: locale ?? Locale.current, arguments: args)
  }
}

extension {{enumName}}: LocalizationStore {
}

// swiftlint:disable convenience_type
private final class BundleToken {
  static let bundle: Bundle = {
    #if SWIFT_PACKAGE
    return Bundle.module
    #else
    return Bundle(for: BundleToken.self)
    #endif
  }()
}
// swiftlint:enable convenience_type
{% else %}
// No string found
{% endif %}
